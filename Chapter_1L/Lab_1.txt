A: - My Answer
S: - Official Solution

Lab 1-1
Files used: Lab01-01.exe, Lab01-01.dll

Questions

1. Upload the files to VirusTotal and view the reports. Does either file match any existing antivirus signatures?

A: Lab01-01.exe 54 security vendors and 1 sandbox flagged this file as malicious. Lab01-01.dll 38/71 security vendors flagged this as malicious. Both files are likely to be malicious according to VT.
S:As of the time of the publication of the book, there should be no results, but that is subject to change

2. When were these files compiled?

A: Lab01-01.exe - 2010/12/19 Sunday 16:16:19 UTC. Lab01-01.dll - 2010/12/19 Sun 16:16:38. 
S: December 19, 2010 within a minute of each other

3. Are there any indications that either of these files is packed or obfuscated? If so what are these indicators?

A. No indication that Lab01-01.exe or Lab01-01.dll is packed given the Virtual Size is less than the Actual Size.
S: No indication that either file is packed or obfuscated

4. Do any imports hint at what this malware does? If so, which imports are they?

A. 
Lab01-01.exe
CopyFile
CreateFile
CreateFileMapping
FindFirstFile/FindNextFile
  Used to search through a directory and enumerate the filesystem
MapViewOfFile
  Maps a file into memory and makes the contents of the file accessible via memory addresses. Used by launchers, loaders and injectors. Can be used to avoid using WriteFile to modify the contents of a file. 
UnmapViewOfFile
Lab01-01.dll
CreateMutex
  Creates a mutual exclusion object that can be used by malware to ensure that only a single instance of the malware is running on a system at any given time. Malware often uses fixed names for mutexes, which can be good host-based indicators to detect additional installations of the malware. 
CreateProcess
OpenMutex

S: 
Lab01-01.exe
FindFirstFile/FindNextFile
CopyFile
These imports tell us that the program searches the file system and copies files. 
Lab01-01.dll
CreateProcess
Sleep
Imports functions from WS2_32.dll which provides network functionality

5. Are there any other files or host-based indicators that you could look for on infected systems?

A: Given the CreateMutex function in the .dll I could look for the fixed name for the mutual exclusion object to check for additional installations of the malware. Could also look for new files created by Lab01-01.exe given it's use of the CreateFile function as well as new copies of the file as it looks like the functions can be used to proliferate the program through a file system. 

S:Examine C:\Windows\System32\kerne132.dll for additional malicious activity (l is replaced by 1, suspicious). This file can be used as ahost indicator to search for the malware.

6. What network-based indicators could be used to find this malware on infected machines?

A: Potential network-based indicators include unusual traffic over the network that doesn't match usual activity, download of new external files, and a proliferation of the same file across the network

S:The .dll file contains a reference to local IP address 127.26.151.13. This address is an artifact of this program having been created for educational and not malicious purposes. If it was real malware, the IP address should be routable, and it would be a good network-based indicator for use in identifying this malware.

7. What would you guess is the purpose of these files?

A: Given the ability of these files to Create Files, map files into memory, create processes, and enumerate/search through a filesystem, I guess these files are an injector/launcher/loader that also has the ability to copy itself and spread throughout the file system and/or network.

S: The .dll file is probably a backdoor. The .exe file is used to install or run the DLL. 

Lab 1-2
Files used: lab01-02.exe

Questions

1. Upload the Lab01-02.exe file to VirusTotal and view the reports. Does it match any existing antivirus signatures?

A: 58/72 security vendors and 1 sandbox flagged this file as malicious as of 3/23/2024

S: As of this writing, the file matches 3 of 41 antivirus signatures

2. Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.

A: This file is packed. The IMAGE_SECTION_HEADERS hall have the size of the Raw Data being much less than the Virtual Size (One even lists the Raw Data size as 0). UPX is also mentioned in many of the section's, implying the file was packed with UPX. Unpacked with upx -d command. 

S: There are several indications that the program is packed with UPX. You can unpack it by downloading UPX and running upx -d. 

3. Do any imports hint at this program's functionality? If so, which imports are they and what do they tell you?

A: 
CreateWaitableTimer, SetWaitableTimer, WaitForSingleObject: Implies that the program uses timers to wait for a specific input
OpenMutex, CreateMutex: Implies program uses Mutex's to ensure that only a single instance of the malware is running. If I can find the name for this fixed object it can become a good host based indicator.
CreateService, StartServiceCtrlDispatcher: Program most likely starts a service.
InternetOpenUrl, InternetOpen: Program tries to access the internet. Look for specific IP's or URL's in the strings to find out where it tries to connect to. 

S:
After unpacking the file, you'll see that the most interesting imports are CreateService, InternetOpen, and InternetOpenURL.


4. What host- or network-based indicators could be used to identify this malware on infected machines? 

A: 
Host Based: 
MalService
HGL345
Internet Explorer 8.0

Network Based:
http://www.malwareanalysisbook.com

S: You should check infected machines for a service called Malservice and for network traffic to http://www.malwareanalysisbook.com/.

Lab 1-3
Files used: Lab01-03.exe
Questions
1. Upload the Lab01-03.exe file to VirusTotal and view the reports. Does it match any existing antivirus signatures?
A: 66/72 security vendors and no sandboxes flagged this file as malicious
S: As of this writing, 25 of 43 virus engines identify this sample as malware

2. Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.
A: Yes, in all of the IMAGE_SECTION_HEADERS the physical size is less than the Virtual Size (in one the physical size is 0). Most of the strings are also gibbiresh, and there aren't the usual sections that would be expected of an unpacked executable. Using PEiD I discovered it was packed in the following formate: FSG 1.0 -> dulek/xt
S:The file is packed, but we can't unpack it at this time.

3. Do any imports hint at this program's functionality? If so, which imports are they and what do they tell you?
A: I'm currently unable to unpack FSG, but I can see imports for LoadLibraryA and GetProcAddress which are common for packed executables and are linked with programs that utulize Runtime Linking
S:This question can't be answered without unpacking the file

4. What host- or network-based indicators could be used to identify this malware on infected machines?
A: Could not find any reliable indicators due to packed nature of the file
S: This question can't be answered without unpacking the file

Lab 1-4
Files used: Lab01-04.exe
Questions
1. Upload the Lab01-04.exe file to VirusTotal and view the reports. Does it match any existing antivirus signatures?
A: 61/71 security vendors and 2 sandboxes flagged this file as malicious
S: As of writing, 16 of 42 antivirus engines identify this as malicious

2. Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.
A: No indicators that file is packed or obfuscated
S: No indications that the file is packed or obfuscated

3. When was this progarm compiled?
A: 2019/8/30 Friday 22:26:59 UTC
S: According to the file header, this program was compiled in August 2019. Clearly the compile time is faked, and we can't determine when the file was compiled (book was written in 2012). 

4. Do any imports hint at this program's functionality? If so, which imports are they and what do they tell you?
A: CreateFile, CreateRemoteThread, FindResource, GetModuleHandle, GetProcAddress, GetTempPath, GetWindowsDirectory, LoadLibrary, LoadResource, OpenProcess, WinExec, AdjustTokenPrivileges
These imports together paint the picture of a program that searches through files, resources, threads, module handles, processes, etc. in order to complete process injection to launch another malicious program from its resources. 
S: The imports from advapi32.dll indicate that the program is doing something with permissions. The imports from WinExec and WriteFile, along with the results from VirusTotal.com tell us that the program writes a file to disk and then executes it. There are also imports for reading information from the resource section of the file. 

5. What host- or network-based indicators could be used to identify this malware on infected machines? 
A: Host based files and filepaths to look for: winlogon.exe, SeDebugPrivilege, sfc_os.dll, \system32\wupdmgr.exe, EnumProcessModules, psap.dll, \system32\wupdmgr.exe, winup.exe, \system32\wupdmgrd.exe, updater.exe
Network-based indicator - http://www.practicalmalwareanalysis.com/updater.exe
S:The string \system32\wupdmgr.exe indicates that this program could create or modify a file at that location. The string www.malwareanalysisbook.com/updater.exe probably indicates where additional malware is stored, ready for download

6. This file has one resource in the resource section. Use Resource Hacker to examine that resource, and then use it to extract the resource. What can you learn from the resource?
A: there is a website domain address detailed above. This implies that the malware will attempt to get the host to access this site, download updater.exe, and run it with elevated privileges for increased compromise of the host
S:The resource section contains another PE executable. Use Resource Hacker to save the resource as binary data, and then analyze the binary file as you would analyze any executable. The executiable in the resource section is a downloader program that downloads additional malware. 

Detailed Solution: While we guess the program download something from the string found in the resource section, it still doesn't import any network related functions. Resource Hacker identifies the type of the resource as binary, meaning arbitrary binary data. Most of the data is meaningless, but notice the string "!This program cannot be run in DOS mode.". This string is the error message included in the DOS header at the beginning of all PE files. We can therefore conclude that this resource is an additional executable file stored in the resource section of Lab01-04.exe. This is a fairly common technique. to continue analyzing this file with Resource Hacker, we click Action -> Save resource as binary file. After saving the resource we open the file in PEview to analyze the file embedded within it. Looking at the imports, we see that the embedded file is the one that accesses the network functions such as URLDownloadToFile. It also calls WinExec, which probably executes the downloaded file. 
